import requests
import time
import random
from pathlib import Path


class YandexDiskClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ API.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –∏ rate limiting
    - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
    - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ upload/download –æ–ø–µ—Ä–∞—Ü–∏–π
    - –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff —Å jitter –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤ –∏ –ø—Ä—è–º—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ timeout'—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    def _normalize_path(self, path: str | Path) -> Path:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥: –ø—Ä–∏–≤–æ–¥–∏—Ç –ø—É—Ç—å –∫ —Ç–∏–ø—É Path, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω str.
        """
        if isinstance(path, str):
            return Path(path)
        return path

    def __init__(self, token: str):
        self.token = token
        self.api_base = "https://cloud-api.yandex.net/v1/disk/resources"
        self.headers = {"Authorization": f"OAuth {self.token}"}

    def _make_request(self, method: str, url: str="/", params=None, max_retries: int = 3, is_api_call: bool = True, **kwargs):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
            url: URL endpoint (–¥–ª—è API) –∏–ª–∏ –ø–æ–ª–Ω—ã–π URL (–¥–ª—è upload/download)
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            is_api_call: True –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤ (–¥–æ–±–∞–≤–ª—è–µ—Ç base URL + headers), False –¥–ª—è –ø—Ä—è–º—ã—Ö HTTP
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è requests
            
        Returns:
            Response –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        """

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è params –∏–∑ Path –≤ str, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if params is not None and isinstance(params, dict):
            params = {k: str(v) if isinstance(v, Path) else v for k, v in params.items()}
            kwargs['params'] = params

        # –¢–∏–ø—ã –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å
        retryable_errors = (
            requests.exceptions.ConnectionError,    # Network is unreachable
            requests.exceptions.Timeout,            # Timeout errors
            requests.exceptions.ChunkedEncodingError,  # Incomplete read
            requests.exceptions.HTTPError           # HTTP errors
        )
        
        for attempt in range(max_retries + 1):
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
                if 'timeout' not in kwargs:
                    kwargs['timeout'] = 60 if not is_api_call else 30  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout –¥–ª—è upload/download
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∏ headers –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
                if is_api_call:
                    full_url = self.api_base + url
                    request_headers = self.headers
                    operation_type = "API"
                else:
                    full_url = url
                    request_headers = kwargs.pop('headers', {})  # –î–ª—è upload/download headers –º–æ–≥—É—Ç –±—ã—Ç—å –≤ kwargs
                    operation_type = "Upload/Download"
                
                response = requests.request(method, full_url, headers=request_headers, **kwargs)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                if response.status_code == 429:  # Too Many Requests
                    if attempt < max_retries:
                        try:
                            retry_after = int(response.headers.get('Retry-After', '1'))
                        except (ValueError, TypeError):
                            retry_after = 1
                        wait_time = min(retry_after, 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
                        print(f"üïê {operation_type} rate limit (429), –∂–¥–µ–º {wait_time}—Å... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1})")
                        time.sleep(wait_time)
                        continue
                
                if response.status_code >= 500:  # Server errors
                    if attempt < max_retries:
                        server_wait_time: float = self._calculate_backoff_time(attempt)
                        print(f"üîÑ {operation_type} —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ {response.status_code}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {server_wait_time:.1f}—Å... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1})")
                        time.sleep(server_wait_time)
                        continue
                
                # print(f'<{method}:{url}{kwargs.get("params", {})} -> {response.status_code}>')
                return response
                
            except retryable_errors as e:
                if attempt < max_retries:
                    network_wait_time: float = self._calculate_backoff_time(attempt)
                    print(f"üîÑ {operation_type} —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {network_wait_time:.1f}—Å... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1})")
                    time.sleep(network_wait_time)
                    continue
                else:
                    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è {operation_type.lower()} –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    return None
                    
            except requests.exceptions.RequestException as e:
                # –ù–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                print(f"‚ùå –û—à–∏–±–∫–∞ {operation_type.lower()} –∑–∞–ø—Ä–æ—Å–∞: {e}")
                return None
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        print(f"‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ {max_retries} –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è {method} {url}")
        return None
    
    def _calculate_backoff_time(self, attempt: int) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff + jitter
        
        Args:
            attempt: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (0, 1, 2, ...)
            
        Returns:
            –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff: 1s, 2s, 4s, 8s...
        base_delay = min(2 ** attempt, 32)  # –ú–∞–∫—Å–∏–º—É–º 32 —Å–µ–∫—É–Ω–¥—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º jitter (—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å) –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è thundering herd
        jitter = random.uniform(0.1, 0.5) * base_delay
        
        return base_delay + jitter
    
    def _upload_file_with_retry(self, upload_url: str, local_path: str|Path, max_retries: int = 7):
        """
        –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º.
        
        –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç _make_request:
        - –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout (120—Å) –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–∏ retry
        - –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ (7) –¥–ª—è upload –æ–ø–µ—Ä–∞—Ü–∏–π
        
        Args:
            upload_url: URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (–ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ /upload)
            local_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
            
        Returns:
            Response –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        """
        local_path = self._normalize_path(local_path)

        # –¢–∏–ø—ã –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å
        retryable_errors = (
            requests.exceptions.ConnectionError,    # Network is unreachable
            requests.exceptions.Timeout,            # Timeout errors  
            requests.exceptions.ChunkedEncodingError,  # Incomplete read
            requests.exceptions.HTTPError           # HTTP errors
        )
        
        for attempt in range(max_retries + 1):
            try:
                # –ü—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–µ –∑–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                with open(local_path, "rb") as f:
                    response = requests.put(upload_url, files={"file": f}, timeout=120)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout –¥–ª—è upload
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                if response.status_code == 429:  # Too Many Requests
                    if attempt < max_retries:
                        try:
                            retry_after = int(response.headers.get('Retry-After', '1'))
                        except (ValueError, TypeError):
                            retry_after = 1
                        wait_time = min(retry_after, 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
                        print(f"üïê Upload rate limit (429), –∂–¥–µ–º {wait_time}—Å... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1})")
                        time.sleep(wait_time)
                        continue
                
                if response.status_code >= 500:  # Server errors
                    if attempt < max_retries:
                        server_wait_time: float = self._calculate_backoff_time(attempt)
                        print(f"üîÑ Upload —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ {response.status_code}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {server_wait_time:.1f}—Å... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1})")
                        time.sleep(server_wait_time)
                        continue
                
                return response
                
            except retryable_errors as e:
                if attempt < max_retries:
                    network_wait_time: float = self._calculate_backoff_time(attempt)
                    print(f"üîÑ Upload —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {network_wait_time:.1f}—Å... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1})")
                    time.sleep(network_wait_time)
                    continue
                else:
                    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è Upload –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    return None
                    
            except requests.exceptions.RequestException as e:
                # –ù–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                print(f"‚ùå –û—à–∏–±–∫–∞ Upload –∑–∞–ø—Ä–æ—Å–∞: {e}")
                return None
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        print(f"‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ {max_retries} –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è upload {upload_url}")
        return None

    def list(self, cloud_path: str|Path, limit: int = 10000):
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
        
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ –ø–∞–ø–∫–∏, –ø–æ–ª—É—á–∞—è –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –≤—ã–∑–æ–≤–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø–∞–ø–æ–∫ >1000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
        
        Args:
            cloud_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤ –æ–±–ª–∞–∫–µ
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–º–∞–∫—Å–∏–º—É–º 10000)
            
        Returns:
            –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ (—Ñ–∞–π–ª—ã + –ø–∞–ø–∫–∏)
            
        Note:
            –î–ª—è –±–æ–ª—å—à–∏—Ö –ø–∞–ø–æ–∫ (>1000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤) –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫–æ–Ω—Å–æ–ª—å
        """
        cloud_path = self._normalize_path(cloud_path)

        all_items = []
        offset = 0
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º limit –º–∞–∫—Å–∏–º—É–º–æ–º API
        page_limit = min(limit, 10000)
        
        while True:
            params = {
                "path": str(cloud_path),
                "limit": page_limit,
                "offset": offset
            }
            
            response = self._make_request("GET", "/", params=params)
            if not response or response.status_code != 200:
                break
                
            data = response.json()
            embedded = data.get("_embedded", {})
            items = embedded.get("items", [])
            
            if not items:
                break  # –ë–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
            
            all_items.extend(items)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            total = embedded.get("total", 0)
            current_count = len(all_items)
            
            # –î–ª—è –±–æ–ª—å—à–∏—Ö –ø–∞–ø–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if total > 1000:
                print(f"  üìÑ –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {current_count}/{total}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if current_count >= total or len(items) < page_limit:
                break
                
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            offset += len(items)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–∞–ø–æ–∫
        if len(all_items) > 100:
            print(f"  ‚úÖ –ò—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(all_items)}")
        return all_items

    def exists(self, cloud_path: str|Path):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞"""
        cloud_path = self._normalize_path(cloud_path)

        params = {"path": str(cloud_path), "fields": "path,type,name"}
        response = self._make_request("GET", "/", params=params)
        return response is not None and response.status_code == 200

    def get_item_state(self, cloud_path: str|Path):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ/–ø–∞–ø–∫–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        cloud_path = self._normalize_path(cloud_path)

        params = {"path": str(cloud_path), "fields": "name,type,size,md5,modified"}
        response = self._make_request("GET", "/", params=params)
        
        if response and response.status_code == 200:
            return response.json()
        return None

    def create_dir(self, cloud_path: str|Path, create_parent=True):
        """–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"""
        cloud_path = self._normalize_path(cloud_path)

        params = {"path": cloud_path}
        response = self._make_request("PUT", "/", params=params)

        if response.status_code == 201:
            print(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cloud_path}")
            return True
        elif response.status_code == 409:
            if self.exists(cloud_path):
                print(f"üìÅ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cloud_path}")
                return True
            elif create_parent:
                cloud_path_parent = cloud_path.parent
                return self.create_dir(cloud_path_parent) and self.create_dir(cloud_path, create_parent=False)
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {cloud_path}, {response}")
        return False

    def remove(self, cloud_path: str|Path, permanently: bool = True):
        """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
        cloud_path = self._normalize_path(cloud_path)

        params = {"path": str(cloud_path), "permanently": str(permanently).lower()}
        response = self._make_request("DELETE", "/", params=params)
        if response and response.status_code in (202, 204):
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ: {cloud_path}")
            return True
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {cloud_path}")
        return False

    def download(self, local_path: str|Path, cloud_path: str|Path):
        """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""

        cloud_path = self._normalize_path(cloud_path)

        params = {"path": str(cloud_path)}
        response = self._make_request("GET", "/download", params=params)
        if not response:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {cloud_path}")
            return False
        try:
            download_url = response.json()["href"]
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è download URL
            r = self._make_request("GET", download_url, is_api_call=False)
            if r and r.status_code == 200:
                with open(local_path, "wb") as f:
                    f.write(r.content)
                print(f"‚¨áÔ∏è  –°–∫–∞—á–∞–Ω: {cloud_path}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {cloud_path} (—Å—Ç–∞—Ç—É—Å: {r.status_code if r else 'None'})")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {cloud_path}: {e}")
            return False


    def upload(self, local_path: str|Path, cloud_path: str|Path, overwrite: bool = True, create_parent=True):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"""

        local_path = self._normalize_path(local_path)
        cloud_path = self._normalize_path(cloud_path)

        params = {"path": cloud_path, "overwrite": str(overwrite).lower()}
        response = self._make_request("GET", "/upload", params=params)
        if not response:
            if response.status_code == 409:
                cloud_path_parent = cloud_path.parent

                if create_parent and self.create_dir(cloud_path_parent):
                    return self.upload(local_path, cloud_path, overwrite=overwrite, create_parent=False)
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {cloud_path}")
            return False
        try:
            upload_url = response.json()["href"]
            r = self._upload_file_with_retry(upload_url, local_path)
            if r and r.status_code in (201, 202):
                print(f"‚¨ÜÔ∏è  –ó–∞–≥—Ä—É–∂–µ–Ω: {cloud_path}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {cloud_path} (—Å—Ç–∞—Ç—É—Å: {r.status_code if r else 'None'})")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {cloud_path}: {e}")
            return False


    def move(self, from_cloud_path: str|Path, to_cloud_path: str|Path, overwrite: bool = True):
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
        from_cloud_path = self._normalize_path(from_cloud_path)
        to_cloud_path = self._normalize_path(to_cloud_path)

        params = {
            "from": str(from_cloud_path),
            "path": str(to_cloud_path),
            "overwrite": str(overwrite).lower()
        }
        response = self._make_request("POST", "/move", params=params)
        if response and response.status_code in (201, 202):
            print(f"üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {from_cloud_path} ‚Üí {to_cloud_path}")
            return True
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å: {from_cloud_path} ‚Üí {to_cloud_path}")
        return False


    def copy(self, from_cloud_path: str|Path, to_cloud_path: str|Path, overwrite: bool = True):
        """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
        from_cloud_path = self._normalize_path(from_cloud_path)
        to_cloud_path = self._normalize_path(to_cloud_path)

        params = {
            "from": str(from_cloud_path),
            "path": str(to_cloud_path),
            "overwrite": str(overwrite).lower()
        }
        response = self._make_request("POST", "/copy", params=params)
        if response and response.status_code in (201, 202):
            print(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {from_cloud_path} ‚Üí {to_cloud_path}")
            return True
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: {from_cloud_path} ‚Üí {to_cloud_path}")
        return False


if __name__ == "__main__":
    # main() 

    client = YandexDiskClient("y0__xCPzsuMAhiYnTkg35nf-BM948LQog9swbmNQT8rEa-gt1Alwg")

    # client.upload("test2/test3/testfile")
    print(len(client.list('app:/TestCategory/ArticleFullWaveSeis/.git/objects')))
    