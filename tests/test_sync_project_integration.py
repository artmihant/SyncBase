#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è sync_project.py

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:
1. –û—Ç–ø—Ä–∞–≤–∫–∞ test_project –≤ –æ–±–ª–∞–∫–æ (save)
2. –ó–∞–≥—Ä—É–∑–∫–∞ test_project –∏–∑ –æ–±–ª–∞–∫–∞ (load)
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è:
- .env —Ñ–∞–π–ª —Å YANDEX_DISK_TOKEN –∏ BASE_PATH
- test_project –ø–∞–ø–∫–∞ –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
"""

import os
import sys
import time
import shutil
from pathlib import Path
from typing import Optional
from unittest.mock import patch
import subprocess
from dotenv import load_dotenv


class SyncProjectIntegrationTest:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è sync_project.py"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        self.yandex_token = os.getenv("YANDEX_DISK_TOKEN")
        self.base_path = os.getenv("BASE_PATH")
        
        if not self.yandex_token or not self.base_path:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã YANDEX_DISK_TOKEN –∏–ª–∏ BASE_PATH –≤ .env —Ñ–∞–π–ª–µ")
        
        # –ü—É—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.workspace_path = Path.cwd()
        print(f'workspace_path: {self.workspace_path}')
        self.test_project_path = self.workspace_path / "tests"/ "test_project"
        self.tmp_category_path: Optional[Path] = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ test_project
        if not self.test_project_path.exists():
            raise FileNotFoundError(f"–ü–∞–ø–∫–∞ test_project –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {self.workspace_path}")
    
    def setup(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"""
        print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ç–µ—Å—Ç—É...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ BASE_PATH
        if self.base_path is None:
            raise RuntimeError("base_path –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        base_path = Path(self.base_path)
        temp_category_name = f"tmp_TestCategory_{int(time.time())}"
        self.tmp_category_path = base_path / temp_category_name
        self.tmp_category_path.mkdir(exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {self.tmp_category_path}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫: $BASE_PATH/tmp_TestCategory_xxx/test_project
        
        self.tmp_project_path = self.tmp_category_path / "test_project"
        shutil.copytree(self.test_project_path, self.tmp_project_path)
        print(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω test_project –≤ {self.tmp_project_path}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –¥–≤–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã—à–µ –æ—Ç BASE_PATH)
        os.chdir(self.tmp_project_path)
        print(f"üìç –ü–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {self.tmp_project_path}")
        
    
    def teardown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.chdir(self.workspace_path)
        
        # # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        # if self.tmp_category_path and self.tmp_category_path.exists():
        #     shutil.rmtree(self.tmp_category_path)
        #     print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {self.tmp_category_path}")
    
    def run_sync_command(self, command, project_name="test_project"):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É sync_project.py"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        if self.tmp_category_path is None:
            raise RuntimeError("backup_path –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (tmp_TestCategory_xxx/test_project)
        if not self.tmp_project_path.exists():
            raise FileNotFoundError(f"–ü—Ä–æ–µ–∫—Ç {project_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {self.tmp_project_path}")
        
        os.chdir(self.tmp_project_path)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        try:
            result = subprocess.run(
                [sys.executable, str(self.workspace_path / "sync_project.py"), command],
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            print(f"üì§ –ö–æ–º–∞–Ω–¥–∞ {command} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º: {result.returncode}")
            if result.stdout:
                print("üìã –í—ã–≤–æ–¥:")
                print(result.stdout)
            if result.stderr:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∏:")
                print(result.stderr)
            
            return result
            
        except subprocess.TimeoutExpired:
            print(f"‚è∞ –ö–æ–º–∞–Ω–¥–∞ {command} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç (5 –º–∏–Ω—É—Ç)")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            return None
    
    def test_full_sync_cycle(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print("\n" + "="*60)
        print("üîÑ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print("="*60)
        
        try:
            # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –æ–±–ª–∞–∫–æ
            print("\nüì§ –®–ê–ì 1: –û—Ç–ø—Ä–∞–≤–∫–∞ test_project –≤ –æ–±–ª–∞–∫–æ...")
            save_result = self.run_sync_command("save")
            
            if not save_result or save_result.returncode != 0:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–±–ª–∞–∫–æ")
                return False
            
            print("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±–ª–∞–∫–æ")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ API
            print("‚è≥ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ API...")
            time.sleep(10)
            
            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            print("\nüìä –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
            status_result = self.run_sync_command("status")
            
            if not status_result or status_result.returncode != 0:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
                return False
            
            print("‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω")
            
            # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –æ–±–ª–∞–∫–∞
            print("\nüì• –®–ê–ì 3: –ó–∞–≥—Ä—É–∑–∫–∞ test_project –∏–∑ –æ–±–ª–∞–∫–∞...")
            
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
            if self.tmp_category_path is None:
                raise RuntimeError("backup_path –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            if self.tmp_project_path.exists():
                shutil.rmtree(self.tmp_project_path)
                print("üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ test_project —É–¥–∞–ª–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
            self.tmp_project_path.mkdir(parents=True)
            print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ test_project")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –æ–±–ª–∞–∫–∞
            load_result = self.run_sync_command("load")
            
            if not load_result or load_result.returncode != 0:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –æ–±–ª–∞–∫–∞")
                return False
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
            print("\nüîé –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º...")

            import filecmp

            def compare_dirs(dir1, dir2, ignore=None):
                """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
                cmp = filecmp.dircmp(dir1, dir2, ignore=ignore)
                if cmp.left_only or cmp.right_only or cmp.diff_files or cmp.funny_files:
                    print(f"‚ùå –û—Ç–ª–∏—á–∏—è –Ω–∞–π–¥–µ–Ω—ã –º–µ–∂–¥—É {dir1} –∏ {dir2}:")
                    if cmp.left_only:
                        print(f"  –¢–æ–ª—å–∫–æ –≤ {dir1}: {cmp.left_only}")
                    if cmp.right_only:
                        print(f"  –¢–æ–ª—å–∫–æ –≤ {dir2}: {cmp.right_only}")
                    if cmp.diff_files:
                        print(f"  –†–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã: {cmp.diff_files}")
                    if cmp.funny_files:
                        print(f"  –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã: {cmp.funny_files}")
                    return False
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                for subdir in cmp.common_dirs:
                    if not compare_dirs(
                        dir1 / subdir,
                        dir2 / subdir,
                        ignore=ignore
                    ):
                        return False
                return True

            # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
            orig_path = self.test_project_path
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
            restored_path = self.tmp_project_path

            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º .git –∏ .syncignore –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            ignore_list = [".git", ".syncignore", "__pycache__"]

            if compare_dirs(orig_path, restored_path, ignore=ignore_list):
                print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—É (–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤)")
            else:
                print("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
                return False
            print("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –æ–±–ª–∞–∫–∞")
            
            # –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            print("\nüìä –®–ê–ì 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
            final_status_result = self.run_sync_command("status")
            
            if not final_status_result or final_status_result.returncode != 0:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
                return False
            
            print("‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            print("\nüéâ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def test_sync_ignore_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å .syncignore"""
        print("\n" + "="*60)
        print("üö´ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò .SYNCIGNORE")
        print("="*60)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .syncignore —Ñ–∞–π–ª–∞
            if self.tmp_project_path is None:
                raise RuntimeError("backup_path –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            syncignore_path = self.tmp_project_path / ".syncignore"
            if not syncignore_path.exists():
                print("‚ùå .syncignore —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .syncignore
            with open(syncignore_path, 'r') as f:
                syncignore_content = f.read()
            
            print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .syncignore:\n{syncignore_content}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ .git –ø–∞–ø–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
            if ".git" in syncignore_content:
                print("‚úÖ .git –ø–∞–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ .syncignore")
            else:
                print("‚ö†Ô∏è .git –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .syncignore")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ .syncignore: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üß™ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í –î–õ–Ø SYNC_PROJECT.PY")
        print("="*80)
        
        try:
            self.setup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            test_results = []
            
            # –¢–µ—Å—Ç .syncignore
            test_results.append(("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å .syncignore", self.test_sync_ignore_functionality()))
            
            # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            test_results.append(("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", self.test_full_sync_cycle()))
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n" + "="*80)
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            print("="*80)
            
            all_passed = True
            for test_name, result in test_results:
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                print(f"{test_name}: {status}")
                if not result:
                    all_passed = False
            
            if all_passed:
                print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            else:
                print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            
            return all_passed
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
        finally:
            self.teardown()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    try:
        test_runner = SyncProjectIntegrationTest()
        success = test_runner.run_all_tests()
        
        if success:
            print("\nüéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            sys.exit(0)
        else:
            print("\nüí• –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –° –û–®–ò–ë–ö–ê–ú–ò!")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 