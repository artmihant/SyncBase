#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—É—Ç–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv


def test_path_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—É—Ç–µ–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—É—Ç–µ–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    base_path = os.getenv("BASE_PATH")
    if not base_path:
        print("‚ùå BASE_PATH –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    print(f"‚úÖ BASE_PATH: {base_path}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ BASE_PATH
    base_path_obj = Path(base_path)
    temp_dir_name = f"tmp_test_{int(time.time())}"
    temp_path = base_path_obj / temp_dir_name
    
    print(f"üìÅ –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_path}")
    temp_path.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    category_path = temp_path / "TestCategory"
    category_path.mkdir(exist_ok=True)
    
    project_path = category_path / "test_project"
    project_path.mkdir(exist_ok=True)
    
    print(f"üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:")
    print(f"   {temp_path}")
    print(f"   ‚îî‚îÄ‚îÄ TestCategory")
    print(f"       ‚îî‚îÄ‚îÄ test_project")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤–Ω—É—Ç—Ä–∏ BASE_PATH
    current_path = str(project_path.absolute())
    if not current_path.startswith(base_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: {current_path} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ {base_path}")
        return False
    
    print(f"‚úÖ –ü—É—Ç—å {current_path} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ {base_path}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç BASE_PATH
    rel_to_base = os.path.relpath(current_path, base_path)
    parts = rel_to_base.split(os.sep)
    
    print(f"üìä –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: {rel_to_base}")
    print(f"üìä –ß–∞—Å—Ç–∏ –ø—É—Ç–∏: {parts}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π (–º–∏–Ω–∏–º—É–º –ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ü—Ä–æ–µ–∫—Ç)
    if len(parts) < 2:
        print(f"‚ùå –ü—É—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(parts)} —á–∞—Å—Ç–µ–π, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2")
        return False
    
    print(f"‚úÖ –ü—É—Ç—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–ª–∏–Ω—É: {len(parts)} —á–∞—Å—Ç–µ–π")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (–¥–≤–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã—à–µ)
    project_local_path = os.path.join(base_path, parts[0], parts[1])
    print(f"üìÅ –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É: {project_local_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.isdir(project_local_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {project_local_path}")
        return False
    
    print(f"‚úÖ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: {project_local_path}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ base_path
    relative_path = os.path.relpath(project_local_path, base_path)
    print(f"üìä –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É: {relative_path}")
    
    # –û—á–∏—Å—Ç–∫–∞
    import shutil
    shutil.rmtree(temp_path)
    print(f"üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {temp_path}")
    
    print("\nüéâ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—É—Ç–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    return True


if __name__ == "__main__":
    try:
        import time
        success = test_path_structure()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 