#!/usr/bin/env python3

import concurrent.futures
import fnmatch
import os
from pathlib import Path
import sys
import threading
import time
from typing import Callable, Dict, List, Optional, Any
from dotenv import load_dotenv
import json
import datetime


from sync_item import SyncItem
from yandex_disk_client import YandexDiskClient



class SyncIgnore:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ .syncignore —Ñ–∞–π–ª–æ–≤ (–∞–Ω–∞–ª–æ–≥ .gitignore)"""
    
    def __init__(self, rules_text=""):
        self.rules = []
        self.parse_rules(rules_text)
    
    def parse_rules(self, rules_text:str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∞–≤–∏–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ .syncignore"""
        self.rules = []
        if not rules_text:
            return
            
        for line in rules_text.strip().split('\n'):
            line = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if not line or line.startswith('#'):
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ
            negate = line.startswith('!')
            if negate:
                line = line[1:]
                
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å (—É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ —Å–ª–µ—à–∏)
            if line.startswith('/'):
                line = line[1:]
                
            self.rules.append({
                'pattern': line,
                'negate': negate,
                'is_directory': line.endswith('/'),
                'absolute': not ('*' in line or '?' in line or '[' in line)
            })
    
    def should_ignore(self, file_path:str, is_directory:bool=False):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É"""
        if not self.rules or not file_path:
            return False
            
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
        path = file_path.replace('\\', '/').lstrip('/')
        
        ignored = False
        
        for rule in self.rules:
            pattern = rule['pattern']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø (—Ñ–∞–π–ª/–ø–∞–ø–∫–∞)
            if rule['is_directory'] and not is_directory:
                continue
                
            # –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–∞–ø–∫–∏
            if pattern.endswith('/'):
                pattern = pattern[:-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            matched = False
            
            if rule['absolute']:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                matched = (path == pattern or path.startswith(pattern + '/'))
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º fnmatch –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞
                matched = (fnmatch.fnmatch(path, pattern) or 
                          fnmatch.fnmatch(os.path.basename(path), pattern))
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º–æ–π –ø–∞–ø–∫–µ
                path_parts = path.split('/')
                for i in range(len(path_parts)):
                    subpath = '/'.join(path_parts[:i+1])
                    if fnmatch.fnmatch(subpath, pattern):
                        matched = True
                        break
            
            if matched:
                if rule['negate']:
                    ignored = False  # –û—Ç—Ä–∏—Ü–∞–Ω–∏–µ - –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
                else:
                    ignored = True   # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
                    
        return ignored


THREADS_COUNT = 16  # –°–Ω–∏–∂–µ–Ω–æ —Å 16 –¥–æ 8 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ API

class SyncProject:
    """ –ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ """
    syncignore: SyncIgnore
    yandex_disk_client: YandexDiskClient

    # –í—Å–µ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—å–µ–∫—Ç—ã
    sync_items: Dict[str, SyncItem] # {relative_path: SyncItem}

    # –§–∞–π–ª—ã, –Ω–∞–ª–∏—á–µ—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
    items_need_for_update: Dict[str, Dict[str, List[SyncItem]]]

    def __init__(self, base_path: Path | str, category_name:str, project_name: str, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        Args:
            local_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            cloud_path: –ü—É—Ç—å –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            token: –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±–ª–∞–∫—É
        """

        relative_path = os.path.join(category_name, project_name)

        self.yandex_disk_client = YandexDiskClient(token)
        self.syncignore = SyncIgnore()

        self.sync_items = {} 

        self.local_path = Path(base_path) / relative_path
        self.cloud_path = Path("app:") / relative_path
        self.relative_path = relative_path

        self.items_need_for_update = {
            'empty': {
                'empty': [],
                'file': [],
                'dir': [],
            },
            'file': {
                'empty': [],
                'file': [],
                'dir': [],
            },
            'dir': {
                'empty': [],
                'file': [],
                'dir': [],
            }
        }

    @property
    def token(self):
        return self.yandex_disk_client.token


    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        return f"<{self.relative_path}>"


    def __repr__(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        return f"<SyncProject {self.relative_path}>"


    def create_item(self, relative_path: str):
        if relative_path:
            return SyncItem(self.local_path / relative_path, self.cloud_path / relative_path, self.token)
        return SyncItem(self.local_path, self.cloud_path, self.token)


    def local_scan(self):

        root_dir = self.create_item("")
        root_dir.calc_local_state()

        if root_dir.local_type == 'empty':
            root_dir.create_local_dir()
        elif root_dir.local_type == 'file':
            raise FileExistsError(f'{root_dir} if file!')

        syncignore_file = self.create_item('.syncignore')
        syncignore_file.calc_local_state()

        if syncignore_file.local_type == 'empty':
            syncignore_file.local_path.touch()
            syncignore_file.local_path.write_text(".git\n")
            syncignore_file.local_type = 'file'
        elif syncignore_file.local_type == 'dir':
            raise FileExistsError(f'{syncignore_file} is dir!')

        # –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .syncignore –∏ –ø–∞—Ä—Å–∏–º –ø—Ä–∞–≤–∏–ª–∞
        syncignore_text = ""
        if syncignore_file.local_type == 'file':
            try:
                syncignore_text = syncignore_file.local_path.read_text(encoding='utf-8')
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .syncignore: {e}")
        self.syncignore.parse_rules(syncignore_text)

        
        # –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (SSD = –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
        print("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã")
        local_start = time.time()
        self._scan_local_items("")
        local_time = time.time() - local_start
        print(f"  ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {local_time:.3f} —Å–µ–∫")
        

    def cloud_scan(self):

        # –ó–∞—Ç–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (API = —É–∑–∫–æ–µ –º–µ—Å—Ç–æ)
        print("üîç –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (API)...")
        cloud_start = time.time()
        self._scan_cloud_items_parallel()
        cloud_time = time.time() - cloud_start
        print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {cloud_time:.3f} —Å–µ–∫")
        
        for sync_item in self.sync_items.values():
            if sync_item.local_type != sync_item.cloud_type or sync_item.local_state.md5 != sync_item.cloud_state.md5: 
                self.items_need_for_update[sync_item.local_type][sync_item.cloud_type].append(sync_item)

        total_sync_objects = sum(
            len(items)
            for local_type_dict in self.items_need_for_update.values()
            for items in local_type_dict.values()
        )
        print(f"üî¢ –í—Å–µ–≥–æ –æ–±—å–µ–∫—Ç–æ–≤: {len(self.sync_items)}")

        print(f"üìä –¢—Ä–µ–±—É—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {total_sync_objects}")
        print(f"‚ö° –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ API: {cloud_time:.3f}—Å")


    def _scan_local_items(self, current_path: str):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏"""
        local_dir_path = self.local_path / current_path
        
        if not local_dir_path.exists():
            return
            
        for item in local_dir_path.iterdir():
            relative_path = os.path.join(current_path, item.name) if current_path else item.name
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            if self.syncignore.should_ignore(relative_path, item.is_dir()):
                continue

            if relative_path not in self.sync_items:
                self.sync_items[relative_path] = self.create_item(relative_path)

            self.sync_items[relative_path].calc_local_state()

            if self.sync_items[relative_path].local_type == 'dir':
                self._scan_local_items(relative_path)


    def _scan_cloud_items_parallel(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫"""
        print("    üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        # Thread-safe –¥–æ—Å—Ç—É–ø –∫ –æ–±—â–∏–º —Å–ª–æ–≤–∞—Ä—è–º
        items_lock = threading.Lock()
        folders_queue_lock = threading.Lock()
        
        # –ö—ç—à —É–∂–µ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        scanned_folders = set()
        folders_to_scan = []  # –û—á–µ—Ä–µ–¥—å –ø–∞–ø–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        def process_folder_items(folder_path, items):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∞–ø–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
            with folders_queue_lock:
                if folder_path in scanned_folders:
                    return  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                scanned_folders.add(folder_path)
            
            subfolders_found = []
            
            for item in items:
                item_name = item['name']
                relative_path: str = os.path.join(folder_path, item_name) if folder_path else item_name

                is_dir = item['type'] == 'dir'

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
                if self.syncignore.should_ignore(relative_path, is_dir):
                    continue
                
                if is_dir:

                    with items_lock:
                        if relative_path not in self.sync_items:
                            self.sync_items[relative_path] = self.create_item(relative_path)

                        self.sync_items[relative_path].cloud_state.from_dict(item)
                        # sync_item = self.sync_items[relative_path]
                        # sync_item.cloud_type = 'dir'

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    subfolders_found.append(relative_path)

                else:

                    with items_lock:
                        if relative_path not in self.sync_items:
                            self.sync_items[relative_path] = self.create_item(relative_path) 

                        self.sync_items[relative_path].cloud_state.from_dict(item)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∞–ø–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
            with folders_queue_lock:
                for subfolder in subfolders_found:
                    if subfolder not in scanned_folders:
                        folders_to_scan.append(subfolder)
        
        def scan_single_folder(folder_path):
            """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –æ–¥–Ω—É –ø–∞–ø–∫—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
            try:
                items = self.yandex_disk_client.list(self.cloud_path / folder_path)
                process_folder_items(folder_path, items)
                return True
            except Exception as e:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ {folder_path}: {e}")
                return False
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
        folders_to_scan.append("")
        total_scanned = 0
        
        print("    ‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        # –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç–æ–∫–æ–≤
        while folders_to_scan:
            # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Ä—Ü–∏—é –ø–∞–ø–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            with folders_queue_lock:
                current_batch = folders_to_scan[:]
                folders_to_scan.clear()
            
            if not current_batch:
                break
            
            max_workers = min(THREADS_COUNT, len(current_batch))
            
            with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ—Ä—Ü–∏–∏
                futures = [executor.submit(scan_single_folder, folder) for folder in current_batch]
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                for future in concurrent.futures.as_completed(futures):
                    try:
                        if future.result():
                            total_scanned += 1
                    except Exception as e:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
            
            print(f"    üìä –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–∞–ø–æ–∫: {total_scanned}")
        
        print(f"    ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {total_scanned}")


    def set_cache(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫—ç—à –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ self.sync_items –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        print("üìã –°–æ–∑–¥–∞–µ–º –∫—ç—à –ø—Ä–æ–µ–∫—Ç–∞...")
        
        cache_data_files: Dict[str, dict] = {}
        cache_data_dirs: Dict[str, dict] = {}

        cache_data_statistics: Dict[str, int] = {
            "total_files": 0,
            "total_directories": 0,
            "total_size": 0,
        }

        cache_data = {
            "project_info": {
                "local_path": str(self.local_path),
                "cloud_path": str(self.cloud_path),
                "last_updated": datetime.datetime.now().isoformat(),
                "cache_version": "1.0"
            },
            "files": cache_data_files,
            "dirs": cache_data_dirs,
            "statistics": cache_data_statistics
        }
        

        total_size = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ sync_items
        for relative_path, sync_item in self.sync_items.items():
                
            if sync_item.local_type == 'file':
                cache_data_files[relative_path] = sync_item.local_state.to_dict()
                total_size += sync_item.local_state.size

            elif sync_item.local_type == 'dir':
                cache_data_dirs[relative_path] = sync_item.local_state.to_dict()
                
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cache_data_statistics["total_files"] = len(cache_data_files)
        cache_data_statistics["total_directories"] = len(cache_data_dirs)
        cache_data_statistics["total_size"] = total_size
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –≤ —Ñ–∞–π–ª
        cache_file_path = self.local_path / ".project_cache.json"
        try:
            with open(cache_file_path, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, indent=2, ensure_ascii=False)
            print(f"  ‚úÖ –ö—ç—à –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω: {cache_file_path}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞: {e}")
    
    
    def get_cache(self) -> Optional[Dict]:
        """
        –ß–∏—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .project_cache.json
        
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∫—ç—à–∞ –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        cache_file = self.local_path / ".project_cache.json"
        
        if not cache_file.exists():
            return None
            
        try:
            with open(cache_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞ –ø—Ä–æ–µ–∫—Ç–∞ {self.cloud_path}: {e}")
            return None
    

    def show_status(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–µ–∫—Ç–∞.
        
        –í—ã–≤–æ–¥–∏—Ç:
        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ (–Ω–∞–π–¥–µ–Ω/–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
        - –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
        - –°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫  
        - –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
        
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ .syncignore
        """
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ {str(self)}...")
        
        cache = self.get_cache()
        
        if not cache:
            print("‚ùå –ö—ç—à –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –æ–±–ª–∞–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞")
            return
        
        print(f"‚úÖ –ö—ç—à –Ω–∞–π–¥–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω: {cache['project_info']['last_updated']})")

        self.local_scan()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        cache_files = cache.get('files', {})
        cache_dirs = cache.get('dirs', {})
                
        current_files = {}
        current_dirs = {}
        
        current_total_size = 0

        for relative_path, sync_item in self.sync_items.items():
                
            if sync_item.local_type == 'file':
                current_files[relative_path] = sync_item.local_state.to_dict()
                current_total_size += sync_item.local_state.size

            elif sync_item.local_type == 'dir':
                current_dirs[relative_path] = sync_item.local_state.to_dict()

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        cache_files_set = set(cache_files.keys())
        current_files_set = set(current_files.keys())
        cache_dirs_set = set(cache_dirs.keys())
        current_dirs_set = set(current_dirs.keys())
        
        new_files = current_files_set - cache_files_set
        removed_files = cache_files_set - current_files_set
        new_dirs = current_dirs_set - cache_dirs_set
        removed_dirs = cache_dirs_set - current_dirs_set
        changed_files = set()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–∞—Ö
        for relative_path in cache_files_set & current_files_set:
            cache_file_info = cache_files[relative_path]
            current_file_info = current_files[relative_path]
            
            if cache_file_info.get('md5', '') != current_file_info.get('md5', ''):
                changed_files.add(relative_path)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not any([new_files, removed_files, new_dirs, removed_dirs, changed_files]):
            print("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω - –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return
        
        print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        
        if new_files:
            print(f"\nüìÅ –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã ({len(new_files)}):")
            for file_path in sorted(new_files):
                size = current_files[file_path]['size']
                print(f"   + {file_path} ({size} B)")
        
        if removed_files:
            print(f"\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(removed_files)}):")
            for file_path in sorted(removed_files):
                size = cache_files[file_path]['size']
                print(f"   - {file_path} ({size} B)")
        
        if new_dirs:
            print(f"\nüìÇ –ù–æ–≤—ã–µ –ø–∞–ø–∫–∏ ({len(new_dirs)}):")
            for dir_path in sorted(new_dirs):
                print(f"   + {dir_path}/")
        
        if removed_dirs:
            print(f"\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ ({len(removed_dirs)}):")
            for dir_path in sorted(removed_dirs):
                print(f"   - {dir_path}/")
        
        if changed_files:
            print(f"\nüìù –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(changed_files)}):")
            for file_path in sorted(changed_files):
                size = current_files[file_path]['size']
                print(f"   ~ {file_path} ({size} B)")
        
        print(f"\nüí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –æ–±–ª–∞–∫–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    


    def sync_load(self):
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ–±–ª–∞—á–Ω—ã–º

        self.local_scan()
        self.cloud_scan()

        def async_remove_local(sync_item: SyncItem):
            sync_item.remove_local()

        self.multythread_operation(async_remove_local, 
                                   *self.items_need_for_update['file']['empty'],
                                   *self.items_need_for_update['file']['dir'], 
                                   *self.items_need_for_update['dir']['empty'],
                                   *self.items_need_for_update['dir']['file']
        ) 

        def async_create_dir_local(sync_item: SyncItem):
            sync_item.create_local_dir()

        self.multythread_operation(async_create_dir_local, 
                                *self.items_need_for_update['empty']['dir'],
                                *self.items_need_for_update['file']['dir']
        )


        def asafe_download_file(sync_item: SyncItem):
            sync_item.download_file()

        self.multythread_operation(asafe_download_file, 
                                *self.items_need_for_update['empty']['file'],
                                *self.items_need_for_update['dir']['file'],
                                *self.items_need_for_update['file']['file'],
        )


    def sync_save(self):
        print(f"‚¨ÜÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ {str(self)}...")

        self.local_scan()
        
        # –°–æ–∑–¥–∞–µ–º –∫—ç—à –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±–ª–∞—á–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.set_cache()

        self.cloud_scan()

        def async_remove_cloud(sync_item: SyncItem):
            sync_item.remove_cloud()

        self.multythread_operation(async_remove_cloud, 
                                   *self.items_need_for_update['empty']['file'],
                                   *self.items_need_for_update['empty']['dir'], 
                                   *self.items_need_for_update['file']['dir'],
                                   *self.items_need_for_update['dir']['file']
        ) 

        def async_create_cloud_dir(sync_item: SyncItem):
            sync_item.create_cloud_dir()

        self.multythread_operation(async_create_cloud_dir, 
                                   *self.items_need_for_update['dir']['empty'],
                                   *self.items_need_for_update['dir']['file']
        )

        def async_upload_file(sync_item: SyncItem):
            sync_item.upload_file()

        self.multythread_operation(async_upload_file, 
                                   *self.items_need_for_update['file']['empty'],
                                   *self.items_need_for_update['file']['dir'], 
                                   *self.items_need_for_update['file']['file'],
        )


    def multythread_operation(self, handler: Callable, *items , reverse=False):
        
        if not items:
            return 

        max_workers = min(THREADS_COUNT, len(items))
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            futures: List[concurrent.futures.Future] = [executor.submit(handler, item) for item in sorted(items, key=lambda x:x.cloud_path, reverse=reverse)]
            
            completed = 0
            for future in concurrent.futures.as_completed(futures):
                result = future.result()
                completed += 1
                if completed % THREADS_COUNT == 0 or completed == len(futures):
                    print(f"    üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—å–µ–∫—Ç–æ–≤: {completed}/{len(futures)}")


if __name__ == "__main__":

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    load_dotenv()

    YANDEX_DISK_TOKEN = os.getenv("YANDEX_DISK_TOKEN")
    BASE_PATH = os.getenv("BASE_PATH")

    if not YANDEX_DISK_TOKEN or not BASE_PATH:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_DISK_TOKEN –∏/–∏–ª–∏ BASE_PATH –≤ .env —Ñ–∞–π–ª–µ.")
        sys.exit(1)

    # –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∏—Ç—Å—è –ø—É—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ

    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    current_path = os.path.abspath(os.getcwd())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤–Ω—É—Ç—Ä–∏ base_path
    if not current_path.startswith(BASE_PATH):
        print(f"‚ùå –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ '{current_path}' –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ '{BASE_PATH}'")
        sys.exit(1)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç base_path
    rel_to_base = os.path.relpath(current_path, BASE_PATH)
    parts = rel_to_base.split(os.sep)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π (–º–∏–Ω–∏–º—É–º –ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ü—Ä–æ–µ–∫—Ç)
    if len(parts) < 2:
        print(f"‚ùå –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤–Ω—É—Ç—Ä–∏ '{BASE_PATH}–ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ü—Ä–æ–µ–∫—Ç/'.")
        sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (–¥–≤–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã—à–µ)
    project_local_path = os.path.join(BASE_PATH, parts[0], parts[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.isdir(project_local_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ '{project_local_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        sys.exit(1)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ base_path

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–∞–ø–∫–∞, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞)
    category_name = parts[0]
    project_name = parts[1]
    relative_path = os.path.join(category_name, project_name)

    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä SyncProject —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
    project = SyncProject(
        Path(BASE_PATH),
        category_name,
        project_name,
        YANDEX_DISK_TOKEN
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: save (–≤—ã–≥—Ä—É–∑–∏—Ç—å –≤ –æ–±–ª–∞–∫–æ), load (–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞), status (–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å)
    if len(sys.argv) < 2:
        print("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: save (–≤—ã–≥—Ä—É–∑–∏—Ç—å –≤ –æ–±–ª–∞–∫–æ), load (–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞) –∏–ª–∏ status (–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å)")
        sys.exit(1)

    command = sys.argv[1].lower()

    if command == "save":
        print(f"‚è´ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ ({category_name})...")
        project.sync_save()
    elif command == "load":
        print(f"‚è¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ '{relative_path}'...")
        project.sync_load()
    elif command == "status":
        project.show_status()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ save, load –∏–ª–∏ status.")
        sys.exit(1)
