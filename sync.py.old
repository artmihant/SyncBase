#!/usr/bin/env python3

import os
import sys
import json
import datetime
from pathlib import Path
from typing import Dict, List, Optional
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sync_project import SyncProject


class KnowledgeBaseSync:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self, base_path: str, token: str):
        self.base_path = Path(base_path)
        self.token = token
        self.projects_cache_file = self.base_path / ".knowledge_base_cache.json"
        
    def discover_projects(self) -> List[str]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        projects = []
        
        # –ò—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ü—Ä–æ–µ–∫—Ç
        for category_dir in self.base_path.iterdir():
            if category_dir.is_dir() and not category_dir.name.startswith('.'):
                for project_dir in category_dir.iterdir():
                    if project_dir.is_dir():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–µ–∫—Ç (–µ—Å—Ç—å VERSION —Ñ–∞–π–ª –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)
                        if self._is_valid_project(project_dir):
                            relative_path = project_dir.relative_to(self.base_path)
                            projects.append(str(relative_path))
        
        return sorted(projects)
    
    def _is_valid_project(self, project_dir: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤–∞–ª–∏–¥–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º"""
        # –ü—Ä–æ–µ–∫—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ñ–∞–π–ª–æ–≤
        project_indicators = [
            'VERSION',
            '.syncignore', 
            'README.md',
            'package.json',
            'requirements.txt',
            'Pipfile',
            'Dockerfile'
        ]
        
        for indicator in project_indicators:
            if (project_dir / indicator).exists():
                return True
        
        # –ò–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏ src, docs, tests
        src_dirs = ['src', 'docs', 'tests', 'assets', 'images']
        for src_dir in src_dirs:
            if (project_dir / src_dir).exists():
                return True
                
        return False
    
    def get_project_status(self, project_path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞, –¥–µ–ª–µ–≥–∏—Ä—É—è –ª–æ–≥–∏–∫—É SyncProject"""
        try:
            project_local_path = self.base_path / project_path
            cloud_path = f"app:/{project_path}"
            
            sync_project = SyncProject(
                str(project_local_path),
                cloud_path,
                self.token
            )
            
            return sync_project.get_status()
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_path}: {e}")
            return "unknown"
    
    def get_project_cache(self, project_path: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à –ø—Ä–æ–µ–∫—Ç–∞, –¥–µ–ª–µ–≥–∏—Ä—É—è –ª–æ–≥–∏–∫—É SyncProject"""
        try:
            project_local_path = self.base_path / project_path
            cloud_path = f"app:/{project_path}"
            
            sync_project = SyncProject(
                str(project_local_path),
                cloud_path,
                self.token
            )
            
            return sync_project.get_cache()
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_path}: {e}")
            return None
    
    def status(self):
        """–ö–æ–º–∞–Ω–¥–∞: sync.py status - –±—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        print("üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        
        projects = self.discover_projects()
        if not projects:
            print("‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
        status_counts = {
            'synced': 0,
            'needs_sync': 0,
            'unknown': 0,
            'empty': 0
        }
        
        total_size = 0
        total_files = 0
        
        print("\nüìã –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–æ–≤:")
        print("-" * 80)
        
        for project in projects:
            status = self.get_project_status(project)
            status_counts[status] += 1
            
            cache = self.get_project_cache(project)
            if cache:
                stats = cache.get('statistics', {})
                project_size = stats.get('total_size', 0)
                project_files = stats.get('total_files', 0)
                total_size += project_size
                total_files += project_files
                
                size_str = self._format_size(project_size)
                files_str = f"{project_files} —Ñ–∞–π–ª–æ–≤"
                
                status_emoji = {
                    'synced': '‚úÖ',
                    'needs_sync': 'üîÑ',
                    'unknown': '‚ùì',
                    'empty': 'üìÅ'
                }.get(status, 'üîÑ')
                
                print(f"{status_emoji} {project:<40} {files_str:<15} {size_str}")
            else:
                print(f"üîÑ {project:<40} –∫—ç—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print("-" * 80)
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
        print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {status_counts['synced']}")
        print(f"   –¢—Ä–µ–±—É—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {status_counts['needs_sync']}")
        print(f"   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_counts['unknown']}")
        print(f"   –ü—É—Å—Ç—ã–µ: {status_counts['empty']}")
        print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self._format_size(total_size)}")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    
    def list(self):
        """–ö–æ–º–∞–Ω–¥–∞: sync.py list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º"""
        print("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:")
        print("-" * 80)
        
        projects = self.discover_projects()
        if not projects:
            print("‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for i, project in enumerate(projects, 1):
            status = self.get_project_status(project)
            cache = self.get_project_cache(project)
            
            status_emoji = {
                'synced': '‚úÖ',
                'needs_sync': 'üîÑ',
                'unknown': '‚ùì',
                'empty': 'üìÅ'
            }.get(status, 'üîÑ')
            
            if cache:
                stats = cache.get('statistics', {})
                last_modified = stats.get('last_modified', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                if last_modified != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                    try:
                        dt = datetime.datetime.fromisoformat(last_modified)
                        last_modified = dt.strftime("%Y-%m-%d %H:%M")
                    except:
                        pass
                
                print(f"{i:2d}. {status_emoji} {project}")
                print(f"     üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {last_modified}")
                print(f"     üìä –§–∞–π–ª–æ–≤: {stats.get('total_files', 0)}, –†–∞–∑–º–µ—Ä: {self._format_size(stats.get('total_size', 0))}")
            else:
                print(f"{i:2d}. {status_emoji} {project}")
                print(f"     ‚ö†Ô∏è –ö—ç—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            if i < len(projects):
                print()
    
    def all(self):
        """–ö–æ–º–∞–Ω–¥–∞: sync.py all - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        
        projects = self.discover_projects()
        if not projects:
            print("‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {len(projects)}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        needs_sync = []
        for project in projects:
            status = self.get_project_status(project)
            if status == 'needs_sync':
                needs_sync.append(project)
        
        if not needs_sync:
            print("‚úÖ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            return
        
        print(f"üîÑ –ü—Ä–æ–µ–∫—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {len(needs_sync)}")
        for project in needs_sync:
            print(f"   - {project}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é? (y/N): ").strip().lower()
        if response not in ['y', 'yes', '–¥–∞']:
            print("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        
        for i, project in enumerate(needs_sync, 1):
            print(f"\n[{i}/{len(needs_sync)}] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {project}")
            
            try:
                project_local_path = self.base_path / project
                cloud_path = f"app:/{project}"
                
                sync_project = SyncProject(
                    str(project_local_path),
                    cloud_path,
                    self.token
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
                status = self.get_project_status(project)
                if status == 'needs_sync':
                    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    # –∏–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º
                    sync_project.sync_save()
                
                print(f"   ‚úÖ –ü—Ä–æ–µ–∫—Ç {project} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project}: {e}")
        
        print(f"\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(needs_sync)}")
    
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        if size_bytes == 0:
            return "0 B"
        
        units = ['B', 'KB', 'MB', 'GB']
        unit_index = 0
        
        while size_bytes >= 1024 and unit_index < len(units) - 1:
            size_bytes /= 1024
            unit_index += 1
        
        return f"{size_bytes:.1f} {units[unit_index]}"


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    YANDEX_DISK_TOKEN = os.getenv("YANDEX_DISK_TOKEN")
    BASE_PATH = os.getenv("BASE_PATH")
    
    if not YANDEX_DISK_TOKEN or not BASE_PATH:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_DISK_TOKEN –∏/–∏–ª–∏ BASE_PATH –≤ .env —Ñ–∞–π–ª–µ.")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    kb_sync = KnowledgeBaseSync(BASE_PATH, YANDEX_DISK_TOKEN)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if len(sys.argv) < 2:
        print("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: status, list –∏–ª–∏ all")
        print("   sync.py status - –æ–±–∑–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        print("   sync.py list   - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        print("   sync.py all    - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        sys.exit(1)
    
    command = sys.argv[1].lower()
    
    if command == "status":
        kb_sync.status()
    elif command == "list":
        kb_sync.list()
    elif command == "all":
        kb_sync.all()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: status, list, all")
        sys.exit(1)


if __name__ == "__main__":
    main() 