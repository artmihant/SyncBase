#!/usr/bin/env python3

import os
import sys
import json
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Set
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sync_project import SyncProject, SyncIgnore
from yandex_disk_client import YandexDiskClient


class SyncBase:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ CLI."""

    def __init__(self, base_path: str, token: str):
        self.base_path: Path = Path(base_path)
        self.token: str = token
        self.cloud_client = YandexDiskClient(token)

    # ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ----------
    def _get_local_categories(self) -> List[str]:
        if not self.base_path.exists():
            return []
        categories: List[str] = []
        base_syncignore = self._read_base_syncignore()

        for entry in sorted(self.base_path.iterdir()):
            if entry.is_dir():
                category_name = entry.name
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                if not base_syncignore.should_ignore(category_name, is_directory=True):
                    categories.append(category_name)
        return categories

    def _get_local_projects(self, category: str) -> List[str]:
        category_path = self.base_path / category
        if not category_path.exists() or not category_path.is_dir():
            return []
        projects: List[str] = []
        category_syncignore = self._read_category_syncignore(category)

        for entry in sorted(category_path.iterdir()):
            if entry.is_dir():
                project_name = entry.name
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç
                if not category_syncignore.should_ignore(project_name, is_directory=True):
                    projects.append(project_name)
        return projects

    def _get_cloud_categories(self) -> List[str]:
        items = self.cloud_client.list('app:/') or []
        base_syncignore = self._read_base_syncignore()

        categories = []
        for item in items:
            if item.get('type') == 'dir':
                category_name = item.get('name')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                if not base_syncignore.should_ignore(category_name, is_directory=True):
                    categories.append(category_name)

        return sorted(categories)

    def _get_cloud_projects(self, category: str) -> List[str]:
        cloud_path = f"app:/{category}"
        items = self.cloud_client.list(cloud_path) or []
        category_syncignore = self._read_category_syncignore(category)

        projects = []
        for item in items:
            if item.get('type') == 'dir':
                project_name = item.get('name')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç
                if not category_syncignore.should_ignore(project_name, is_directory=True):
                    projects.append(project_name)

        return sorted(projects)

    # ---------- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .syncignore ----------
    def _read_base_syncignore(self) -> SyncIgnore:
        """–ß–∏—Ç–∞–µ—Ç .syncignore –∏–∑ –∫–æ—Ä–Ω—è –±–∞–∑—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        syncignore_path = self.base_path / '.syncignore'
        syncignore = SyncIgnore()

        if syncignore_path.exists() and syncignore_path.is_file():
            try:
                content = syncignore_path.read_text(encoding='utf-8')
                syncignore.parse_rules(content)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–π .syncignore: {e}")

        return syncignore

    def _read_category_syncignore(self, category: str) -> SyncIgnore:
        """–ß–∏—Ç–∞–µ—Ç .syncignore –∏–∑ –ø–∞–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        category_path = self.base_path / category
        syncignore_path = category_path / '.syncignore'
        syncignore = SyncIgnore()

        if syncignore_path.exists() and syncignore_path.is_file():
            try:
                content = syncignore_path.read_text(encoding='utf-8')
                syncignore.parse_rules(content)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .syncignore –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {e}")

        return syncignore

    def _resolve_context(self, cwd_path: str) -> Dict[str, Optional[str]]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—É—Å–∫–∞: –ø—Ä–æ–µ–∫—Ç/–∫–∞—Ç–µ–≥–æ—Ä–∏—è/–≤–Ω–µ –±–∞–∑—ã.

        Returns:
            dict(level='project'|'category'|'outside'|'base', category, project)
        """
        current_path = os.path.abspath(cwd_path)
        base_path_abs = os.path.abspath(str(self.base_path))

        if not current_path.startswith(base_path_abs.rstrip(os.sep) + os.sep):
            # –ù–µ –≤–Ω—É—Ç—Ä–∏ –±–∞–∑—ã
            return {"level": "outside", "category": None, "project": None}

        rel_to_base = os.path.relpath(current_path, base_path_abs)
        parts = rel_to_base.split(os.sep)
        if len(parts) == 1 and parts[0] == '.':
            return {"level": "base", "category": None, "project": None}

        if len(parts) >= 2:
            category_name = parts[0]
            project_name = parts[1]
            return {"level": "project", "category": category_name, "project": project_name}
        elif len(parts) == 1:
            category_name = parts[0]
            return {"level": "category", "category": category_name, "project": None}

        return {"level": "outside", "category": None, "project": None}

    # ---------- –ü–µ—á–∞—Ç—å —Å–ø–∏—Å–∫–æ–≤ ----------
    def cmd_list(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö, –≤–∫–ª—é—á–∞—è –æ–±–ª–∞—á–Ω—ã–µ."""
        print("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–æ/–æ–±–ª–∞–∫–æ):")
        local_categories = set(self._get_local_categories())
        cloud_categories = set(self._get_cloud_categories())
        all_categories = sorted(local_categories | cloud_categories)

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(all_categories)} (–ª–æ–∫–∞–ª—å–Ω—ã—Ö: {len(local_categories)}, –æ–±–ª–∞—á–Ω—ã—Ö: {len(cloud_categories)})")

        for category in all_categories:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_marks: List[str] = []
            if category in local_categories:
                category_marks.append("local")
            if category in cloud_categories:
                category_marks.append("cloud")
            category_mark_str = "/".join(category_marks) if category_marks else "‚Äî"

            local_projects = set(self._get_local_projects(category))
            cloud_projects = set(self._get_cloud_projects(category))
            all_projects = sorted(local_projects | cloud_projects)
            print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} [{category_mark_str}]")
            if not all_projects:
                print("  (–ø—É—Å—Ç–æ)")
                continue
            for project in all_projects:
                marks: List[str] = []
                if project in local_projects:
                    marks.append("local")
                if project in cloud_projects:
                    marks.append("cloud")
                mark_str = "/".join(marks) if marks else "‚Äî"
                print(f"  - {project} [{mark_str}]")

    # ---------- –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ----------
    def _iter_selected_projects(
        self,
        selector: Tuple[str, Optional[str], Optional[str]]
    ) -> List[Tuple[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (category, project) —Å–æ–≥–ª–∞—Å–Ω–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É.

        selector: (scope, category, project)
        scope ‚àà { 'single', 'category_all', 'category_one', 'all_all' }
        """
        scope, category, project = selector
        selected: List[Tuple[str, str]] = []

        if scope == 'single' and category and project:
            selected.append((category, project))
            return selected

        if scope == 'category_one' and category and project:
            selected.append((category, project))
            return selected

        if scope == 'category_all' and category:
            local = set(self._get_local_projects(category))
            cloud = set(self._get_cloud_projects(category))
            for proj in sorted(local | cloud):
                selected.append((category, proj))
            return selected

        if scope == 'all_all':
            local_c = set(self._get_local_categories())
            cloud_c = set(self._get_cloud_categories())
            for cat in sorted(local_c | cloud_c):
                local = set(self._get_local_projects(cat))
                cloud = set(self._get_cloud_projects(cat))
                for proj in sorted(local | cloud):
                    selected.append((cat, proj))
            return selected

        return selected

    def _run_for_project(self, command: str, category: str, project: str):
        sp = SyncProject(self.base_path, category, project, self.token)
        if command == 'status':
            sp.show_status()
        elif command == 'save':
            sp.sync_save()
        elif command == 'load':
            sp.sync_load()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {command}")

    # ---------- –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞(–æ–≤) ----------
    def _select_targets(self, command: str, ctx: Dict[str, Optional[str]], args: List[str]) -> List[Tuple[str, str]]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç + –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π (category, project)."""
        level = ctx.get('level')
        category = ctx.get('category')
        project = ctx.get('project')

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –∑–∞–ø—É—Å–∫ –∏–∑-–ø–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞, –±–µ–∑ –¥–æ–ø. –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if level == 'project' and not args:
            return self._iter_selected_projects(('single', category, project))

        # –í–∞—Ä–∏–∞–Ω—Ç 2: –∑–∞–ø—É—Å–∫ –∏–∑-–ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å 1 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º: all | <project>
        if level == 'category' and len(args) == 1:
            if args[0] == 'all':
                return self._iter_selected_projects(('category_all', category, None))
            return self._iter_selected_projects(('category_one', category, args[0]))

        # –í–∞—Ä–∏–∞–Ω—Ç 3: –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ –∏–∑ –ª—é–±–æ–π –ø–∞–ø–∫–∏)
        #   - <category> <project>
        #   - <category> all
        #   - all all
        if len(args) == 2:
            a1, a2 = args[0], args[1]
            if a1 == 'all' and a2 == 'all':
                return self._iter_selected_projects(('all_all', None, None))
            if a1 != 'all' and a2 == 'all':
                return self._iter_selected_projects(('category_all', a1, None))
            if a1 != 'all' and a2 != 'all':
                return self._iter_selected_projects(('single', a1, a2))

        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        self._print_usage(command)
        sys.exit(1)

    def _print_usage(self, cmd: Optional[str] = None):
        base = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n" \
               "  sync_base.py list\n" \
               "  sync_base.py status [all all | <category> all | <category> <project>]\n" \
               "  sync_base.py save   [all all | <category> all | <category> <project>]\n" \
               "  sync_base.py load   [all all | <category> all | <category> <project>]\n\n" \
               "–ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑-–ø–æ–¥ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: 'status' | 'save' | 'load' –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n" \
               "–ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑-–ø–æ–¥ –ø–∞–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: 'status|save|load all' –∏–ª–∏ 'status|save|load <project>'."
        if cmd:
            print(f"‚ùó –£—Ç–æ—á–Ω–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{cmd}'.")
        print(base)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    YANDEX_DISK_TOKEN = os.getenv("YANDEX_DISK_TOKEN")
    BASE_PATH = os.getenv("BASE_PATH")
    
    if not YANDEX_DISK_TOKEN or not BASE_PATH:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_DISK_TOKEN –∏/–∏–ª–∏ BASE_PATH –≤ .env —Ñ–∞–π–ª–µ.")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    sync_base = SyncBase(BASE_PATH, YANDEX_DISK_TOKEN)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∏–∑-–ø–æ–¥ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –≤—ã–∑–≤–∞–Ω —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
    cwd_path = os.getcwd()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if len(sys.argv) < 2:
        sync_base._print_usage()
        sys.exit(1)

    command = sys.argv[1].lower()
    args = sys.argv[2:]

    if command == 'list':
        sync_base.cmd_list()
        sys.exit(0)

    if command not in {'status', 'save', 'load'}:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sync_base._print_usage()
        sys.exit(1)

    ctx = sync_base._resolve_context(cwd_path)
    targets = sync_base._select_targets(command, ctx, args)

    if not targets:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        sys.exit(0)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ü–µ–ª–µ–π
    for category, project in targets:
        # –î–ª—è 'save' –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        if command == 'save':
            local_exists = (sync_base.base_path / category / project).is_dir()
            if not local_exists:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ save –¥–ª—è {category}/{project}: –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'load'.")
                continue
        # –î–ª—è 'status' –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç ‚Äî —Å–æ–æ–±—â–∏–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º
        if command == 'status':
            local_exists = (sync_base.base_path / category / project).is_dir()
            if not local_exists:
                print(f"üìä {category}/{project}: –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç. üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'load' –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
                continue
        sync_base._run_for_project(command, category, project)


if __name__ == "__main__":
    main() 